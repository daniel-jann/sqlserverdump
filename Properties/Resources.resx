<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrDatabaseNonExistent" xml:space="preserve">
    <value>database '{0}' doesn't exist</value>
  </data>
  <data name="ErrIO" xml:space="preserve">
    <value>An I/O error has occured while writing to the output (if using Result file, was the media disconnected during write ?)</value>
  </data>
  <data name="ErrMoreThanOneLocalInstance" xml:space="preserve">
    <value>There is more than one local instance. Please use --server-name to select the instance to use.</value>
  </data>
  <data name="ErrNoLocalInstance" xml:space="preserve">
    <value>There is no local instance running</value>
  </data>
  <data name="ErrObjectNonExistentInDatabase" xml:space="preserve">
    <value>object '{0}' doesn't exist in database '{1}'</value>
  </data>
  <data name="ErrResultFileArgumentExceptionEmpty" xml:space="preserve">
    <value>Result file argument is empty.</value>
  </data>
  <data name="ErrResultFileArgumentExceptionSystemDevice" xml:space="preserve">
    <value>Result file contains the name of a system device (com1, com2, ...)</value>
  </data>
  <data name="ErrResultFileDirectoryNotFoundException" xml:space="preserve">
    <value>Result file's directory not found.</value>
  </data>
  <data name="ErrResultFileIOException" xml:space="preserve">
    <value>Result file includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</value>
  </data>
  <data name="ErrResultFilePathTooLongException" xml:space="preserve">
    <value>Result file path or filename is too long.</value>
  </data>
  <data name="ErrResultFileSecurityException" xml:space="preserve">
    <value>This software doesn't have permission to access the result file (try executing it as a user having more privileges)</value>
  </data>
  <data name="ErrResultFileUnauthorizedAccessException" xml:space="preserve">
    <value>Access to result file is not authorized.</value>
  </data>
  <data name="ErrUsageDatabaseRequired" xml:space="preserve">
    <value>You must specify a database</value>
  </data>
  <data name="ErrUsageOptionsDatabaseAndAllDatabaseIncompatibles" xml:space="preserve">
    <value>You cannot use the databases option with the all-databases option.</value>
  </data>
  <data name="ErrUsageOptionsNoSchemaAndNoDataIncompatibles" xml:space="preserve">
    <value>You cannot use both options --no-schema and --no-data at the same time.</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>sqlserverdump version {version}
By Daniel Jann, inspired by the mysqldump utility by
Igor Romanenko, Monty, Jani &amp; Sinisa.
This sofware relies on SQL Server Management Objects (SMO) in order to generate
the SQL statements.
This software comes with ABSOLUTELY NO WARRANTY. This is free software,
and you are welcome to modify and redistribute it under the GPL license.

When dumping data containing non-ascii base characters, use the --result-file
rather than dumping the command line output to a file, because dumping
the command-line to a file uses a DOS encoding.

The resulting dump can be used in Microsoft's SQL Server Management Studio.

Dumping structure and contents of SQL Server databases and objects.
{usage}

The following options may be given:
--all-databases       Dump all the databases. This will be same as --databases
                      with all databases selected.
--databases           Dump several databases. Note the difference in usage; in
                      this case no objects names are given. All name arguments
                      are regarded as database names. 'USE db_name;' will be
                      included in the output.
--result-file=name    Direct output to a given file. If omitted, result will be
                      directed to standard output.
--server-name=instancename
                      Connect to the local instance instancename. If this
                      option is omitted, it will try to connect to the local
                      instance. If there is more than one local instance, an
                      error message will be output. It is recommended to
                      always use this option (with this syntax or the one
                      below) as detecting the local instance doesn't always
                      work.
--server-name=host\instancename
                      Connect to the instance instancename on host. If this
                      option is omitted, it will try to connect to the local
                      instance. If there is more than one local instance, an
                      error message will be output. It is recommended to
                      always use this option (with this syntax or the one
                      above) as detecting the local instance doesn't always
                      work.
--server-name=host    This option requires the sql-engine option to be used.
                      server-name specifies to which host connect when
                      connecting to a sql engine rather than a named instance.
--sql-engine          Use sql engine rather than named instance. The
                      server-name will be used as the host to which connect. If
                      server-name is omitted, it will try to connect on the
                      local host (127.0.0.1)
--username=username   Connect using specified username
--password[=password]
                      Connect using specified password. If password is
                      omitted, it will be prompted on stdin without
                      echoing (good security practice on a command line as the
                      password will not show on the screen nor in the command
                      line history).
--system-databases    Include system databases. Not included by default.
--system-objects      Include system objects (except for sysdiagrams table
                      which is always included). Not included by default.
--no-data             Do not write any table row information (that is, do not
                      dump table contents).
--no-schema           Do not write schema information (create table).
--no-tables           Do not dump tables (neither schema, nor data).
--no-views            Do not dump views definitions.
--no-triggers         Do not dump triggers definitions.
--no-synonyms         Do not dump synonyms definitions.
--no-stored-procedures
                      Do not dump stored procedures definitions.
--no-user-defined-functions
                      Do not dump user defined functions definitions.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage: sqlserverdump [OPTIONS] database [OBJECT1 [OBJECT2 [...]]]
OR     sqlserverdump [OPTIONS] --databases [OPTIONS] DB1 [DB2 [DB3 [...]]]
OR     sqlserverdump [OPTIONS] --all-databases [OPTIONS]</value>
  </data>
  <data name="Usage_more" xml:space="preserve">
    <value>For more options, use sqlserverdump --help</value>
  </data>
</root>