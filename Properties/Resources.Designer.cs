//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.269
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Helvartis.SQLServerDump.Properties {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Helvartis.SQLServerDump.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à An I/O error has occured while writing to the output (if using Result file, was the media disconnected during write ?).
        /// </summary>
        internal static string ErrIO {
            get {
                return ResourceManager.GetString("ErrIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à There is more than one local instance. Please use --server-name to select the instance to use..
        /// </summary>
        internal static string ErrMoreThanOneLocalInstance {
            get {
                return ResourceManager.GetString("ErrMoreThanOneLocalInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à There is no local instance running.
        /// </summary>
        internal static string ErrNoLocalInstance {
            get {
                return ResourceManager.GetString("ErrNoLocalInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Result file argument is empty..
        /// </summary>
        internal static string ErrResultFileArgumentExceptionEmpty {
            get {
                return ResourceManager.GetString("ErrResultFileArgumentExceptionEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Result file contains the name of a system device (com1, com2, ...).
        /// </summary>
        internal static string ErrResultFileArgumentExceptionSystemDevice {
            get {
                return ResourceManager.GetString("ErrResultFileArgumentExceptionSystemDevice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Result file&apos;s directory not found..
        /// </summary>
        internal static string ErrResultFileDirectoryNotFoundException {
            get {
                return ResourceManager.GetString("ErrResultFileDirectoryNotFoundException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Result file includes an incorrect or invalid syntax for file name, directory name, or volume label syntax..
        /// </summary>
        internal static string ErrResultFileIOException {
            get {
                return ResourceManager.GetString("ErrResultFileIOException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Result file path or filename is too long..
        /// </summary>
        internal static string ErrResultFilePathTooLongException {
            get {
                return ResourceManager.GetString("ErrResultFilePathTooLongException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à This software doesn&apos;t have permission to access the result file (try executing it as a user having more privileges).
        /// </summary>
        internal static string ErrResultFileSecurityException {
            get {
                return ResourceManager.GetString("ErrResultFileSecurityException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Access to result file is not authorized..
        /// </summary>
        internal static string ErrResultFileUnauthorizedAccessException {
            get {
                return ResourceManager.GetString("ErrResultFileUnauthorizedAccessException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à sqlserverdump version {version}
        ///By Daniel Jann, inspired by the mysqldump utility by
        ///Igor Romanenko, Monty, Jani &amp; Sinisa.
        ///This software comes with ABSOLUTELY NO WARRANTY. This is free software,
        ///and you are welcome to modify and redistribute it under the GPL license.
        ///
        ///When dumping data containing non-ascii base characters, use the --result-file
        ///rather than dumping the command line output to a file, because dumping
        ///the command-line to a file uses a DOS encoding.
        ///
        ///Dumping structure and contents of S [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Help {
            get {
                return ResourceManager.GetString("Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Usage: sqlserverdump [OPTIONS] database [OBJECT1 [OBJECT2 [...]]]
        ///OR     sqlserverdump [OPTIONS] --databases [OPTIONS] DB1 [DB2 [DB3 [...]]]
        ///OR     sqlserverdump [OPTIONS] --all-databases [OPTIONS].
        /// </summary>
        internal static string Usage {
            get {
                return ResourceManager.GetString("Usage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à For more options, use sqlserverdump --help.
        /// </summary>
        internal static string Usage_more {
            get {
                return ResourceManager.GetString("Usage_more", resourceCulture);
            }
        }
    }
}
